@import url('https://fonts.googleapis.com/css?family=Open+Sans');

#home h1{
    font-weight: 700;
    color: white;
}

#home p, h6{
    color: #dbdbdb;
}

#home h5{
    font-size: 1rem;
    font-weight: 400;
    color: white;
}

button
{
    font-size: 0.8rem;
    font-weight: 700;
    outline: none;
    /* An outline is a line that is drawn around elements, OUTSIDE the borders, to make the element "stand out". The CSS outline properties draw a border around an element that does not affect layout, making it ideal for highlighting. This covers the outline shorthand, as well as outline-width , outline-style , outline-color and outline-offset */
    border: none;
    background-color: black;
    color: aliceblue ;
    padding: 13px 30px;
    cursor: pointer;
    /* The cursor property of CSS allows you to specify the type of cursor that should be displayed to the user. One good usage of this property is in using images for submit buttons on forms. By default, when a cursor hovers over a link, the cursor changes from a pointer to a hand. */
    text-transform: uppercase;
    transition: 0.3s ease;
}

button:hover{
    background-color: #3a3833;
}

hr{
    width: 30px;
    height: 2px;
    background-color: coral;
}

.navbar
{
    font-size: 16px;
    top: 0;
    left: 0;
    box-shadow: 0 5px 10px black;
}

#bar
{
    color: black;
    font-size: 1.5rem;
    padding: 7px;
    cursor: pointer;
    transition: 0.3s ease; 

}

#bar:hover,
#bar.active{
    color: white;
}
/* The :hover selector is used to select elements when you mouse over them. Tip: The :hover selector can be used on all elements, not only on links.

The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user. When using a mouse, "activation" typically starts when the user presses down the primary mouse button. */

@media only screen and (max-width: 991px){

    /* @media is the actually media query. The word screen is adding the 'conditions' to the media query. So @media screen is telling the media query to apply (whatever other conditions) to screens.

    The @media CSS at-rule can be used to apply part of a style sheet based on the result of one or more media queries. With it, you specify a media query and a block of CSS to apply to the document if and only if the media query matches the device on which the content is being used.
    
    @media screen and (max-width: 991px) will target only screens with a max-width of 991px. 
    
    In simple words, This @media is used when we wanna hide some items to look resposiive or modify hidden items like menu button, etc., */

    body > nav > div > button:hover,
    body > nav > div > button:focus{
        background-color: coral;
    }
    /* the above is for menu button */

    body > nav > div > button:hover #bar,
    body > nav > div > button:focus #bar {
        color: white;
    }
    /* the above is for menu button bars(lines) */

    #navbarSupportedContent > ul {
        margin: 1rem;
        justify-content: flex-end;
        /* this flex-end and flex start are used to place them in starting position or ending position*/
        align-items: flex-end;
        text-align: right; 
    }

    #navbarSupportedContent > ul > li:nth-child(n) > a {
        padding: 10px 0px;
    }
    /* nth child is like last <li> which means this code is for search and cart button */
}

/* Mobile Navbar */
.navbar-light .navbar-toggler
{
    border: none ;
    outline: none;
}

.navbar-light .navbar-nav .nav-link
{
    padding: 0 20px;
    color: black;
    transition: 0.3s ease;
}

.navbar-light .navbar-nav .nav-link:hover,
.navbar-light .navbar-nav .nav-link.active,
.navbar ul li i:hover,
.navbar ul li i.active
{
    color: coral;
}

.navbar ul li i
{
    font-size: 1.2rem;
    color: black;
    padding: 0 10px ;
    cursor: pointer;
    transition: 0.3s ease;
}

#home{
    background-image: url("img/bgg.jpg");
    width: 100% ;
    height: 90vh;
    /* 90vh is 90 viewport height, 90vw is 90 viewport width */
    background-size: cover;
    background-position: top 60px center;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: flex-start;

}

#home span
{

    color: coral;
}

#new .one img{
    width: 100%;
    height: 100%;
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
    position: relative;
}

#new .one .details{
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    transition: 0.3s ease;
}

#new .one:hover .details {
    cursor: pointer;
    background-color: rgba(245, 178, 178, 0.7);
}

#new .one .details button {
    display: inline-block;
    font-size: 14px;
    font-weight: 500;
    color: #2a2a2a;
    background: none;
    text-transform: uppercase;
    border-bottom: 1px solid #2a2a2a;
    padding: 2.5px;
    transform: translateY(70px);
    transition: 0.3s ease;

}

#new .one .details button:hover {
    color: #fff;
    border-bottom: 1px solid #fff;
}

#new .one:nth-child(1) .details{ 
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: flex-start;
    text-align: start;
}

#new .one:nth-child(2) .details{
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    text-align: center;
}

#new .one:nth-child(3) .details{
    display: flex;
    justify-content: center; 
    flex-direction: column;
    align-items: flex-end;
    text-align: end;
}


/* Products */
.product {
    cursor: pointer;
    margin-bottom: 2rem; 
    /* 1rem is nothing but 16 px. so, 2rem is 32px*/
}

.product img{
    transition: 0.3s all;
    /* CSS transitions provide a way to control animation speed when changing CSS properties. Instead of having property changes take effect immediately, you can cause the changes in a property to take place over a period of time. */
}

.product:hover img{
    /* hover is used for action taking when we place cursor on image */
    opacity: 0.5;
    /* The CSS opacity property is used to specify the transparency of an element. In simple word, you can say that it specifies the clarity of the image. */
}

.product .buy-btn{
    background-color: coral;
    transform: translateY(20px);
    /* The transform CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model. Here trasnform is used to visble the button */
    opacity: 0;
    /* If opacity=0 means The element is fully transparent (that is, invisible).
    Or If opacity is in between 0 -1, then 	The element is translucent (that is, content behind the element can be seen).
    Or If opacity=1 means The element is fully opaque (visually solid). */
    transition: 0.3s all;
}

.product:hover .buy-btn{
    transform: translateY(0); 
    /* here trasnform is used to invisble the button */
    opacity: 1;
}

.star i{
    font-size: 0.8rem;
    color: goldenrod;
   
}

.star {
    padding: 10px 0;
}

#banner{
    background-image: url("img/banner/2.jpg");
    width: 100% ;
    height: 60vh;
    background-size: cover;
    background-position: top 70px center;
    background-repeat: no-repeat;
    background-attachment: fixed;
    /* The background-attachment property is used to specify that the background image is fixed or scroll with the rest of the page in the browser window. This property has three values scroll, fixed, and local. Its default value is scroll, which causes the element to not scroll with its content. */
    display: flex;
    /* the reason you'd choose to use display:flex is because you want to lay a collection of items out in one direction or another. */
    flex-direction: column;
    /* The flex-direction property specifies the direction of the flexible items. Note: If the element is not a flexible item, the flex-direction property has no effect. */
    justify-content: center;
    /* The justify-content property aligns the flexible container's items when the items do not use all available space on the main-axis (horizontally). Tip: Use the align-items property to align the items vertically. */
    align-items: flex-start;
    /* The CSS align-items property sets the align-self value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area. */
}

#banner h4
{
    color: #dbdbdb;
}
#banner h1
{
    color: #fff;
}
#banner button
{
    background-color: coral;
}

footer{
    background-color: rgb(61, 59, 59);
}

.footer-one h6{
    color: coral;
}

.footer-one img{
    padding-bottom: 10px;
}

footer h5 {
    color: #fff;
    font-weight: 700;
    font-size: 1.2rem;
}

footer li{
    padding-bottom: 4px ;    
}

footer li a {
    font-size: 0.8rem;
    color: #999
}

footer li a:hover {
    color:  coral;
}

footer p{
    color: #999;
    font-size: 0.8rem;
}

footer .copyright a{
    color: coral;
    width: 38px;
    height: 38px;
    background-color: white;
    display: inline-block;
    text-align: center;
    line-height: 38px;
    border-radius: 50%;
    transition: 0.3s ease;
    margin: 0 5px;
} 

footer .copyright a:hover{
    color: white;
    background-color: coral;
}

/* Blog */

#blog-container .post .post-img{
    overflow: hidden;
    cursor: pointer;
}

#blog-container .post img{
    transition: 0.3s ease;
}

#blog-container .post:hover img{
    transform: scale(1.3) rotate(-10deg);
    opacity: 0.8;
}

#blog-container .post h3{
    transition: 0.3s ease;
    cursor: pointer;
}

#blog-container .post:hover h3{
    color: coral
}


/* Cart */

#cart-container {
    overflow-x: auto;
}

#cart-container table{
    border-collapse: collapse;
    width: 100%;
    table-layout: fixed;
    white-space: nowrap;
}

#cart-container table thead{
    font-weight: 700;
}

#cart-container table thead td{
    background: coral;
    color: white;
    border: none;
    padding: 6px 0px;
}

#cart-container table td{
    text-align: center;
}

#cart-container table td:nth-child(1){
    width: 100px;
}

#cart-container table td:nth-child(2), #cart-container table td:nth-child(3){
    width: 200px;
}

#cart-container table td:nth-child(4), #cart-container table td:nth-child(5), #cart-container table td:nth-child(6), #cart-container table td:nth-child(7){
    width: 100px;
}

#cart-container table tbody img{
    width: 100px;
    height: 80px;
    object-fit: cover;
}

#cart-bottom table tbody i{
    color: #8d8c89;
}

#cart-bottom .coupon h5, #cart-bottom .total h5{
    background: coral;
    color: white;
    border: none;
    padding: 6px 12px;
    font-weight: 700;
}

#cart-bottom .coupon p, #cart-bottom .coupon input{
    padding: 0 12px;
}

#cart-bottom .coupon input{
    height: 44px;
}

#cart-bottom .coupon input, #cart-bottom .coupon button {
    margin: 0 0 20px 12px;
}

#cart-bottom .total div>div{
    padding: 0 120x;
}

#cart-bottom .total h6{
    color: black;
}

.second-hr{
    background: #b8b7b3;
    width: 100%;
    height: 1px;
}

#cart-bottom .total div>button{
    margin: 0 12px 20px 0;
    display: flex;
    justify-content: flex-end;
}

